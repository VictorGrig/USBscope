
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000088e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000088e  00000922  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000044  00800062  00800062  00000924  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000924  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000958  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f7d  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000627  00000000  00000000  0000195d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005de  00000000  00000000  00001f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00002564  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005e8  00000000  00000000  00002634  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e13  00000000  00000000  00002c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000140  00000000  00000000  00003a2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	59 c0       	rjmp	.+178    	; 0xb4 <__ctors_end>
   2:	a0 c0       	rjmp	.+320    	; 0x144 <__vector_1>
   4:	72 c0       	rjmp	.+228    	; 0xea <__bad_interrupt>
   6:	71 c0       	rjmp	.+226    	; 0xea <__bad_interrupt>
   8:	70 c0       	rjmp	.+224    	; 0xea <__bad_interrupt>
   a:	6f c0       	rjmp	.+222    	; 0xea <__bad_interrupt>
   c:	6e c0       	rjmp	.+220    	; 0xea <__bad_interrupt>
   e:	6d c0       	rjmp	.+218    	; 0xea <__bad_interrupt>
  10:	6c c0       	rjmp	.+216    	; 0xea <__bad_interrupt>
  12:	6b c0       	rjmp	.+214    	; 0xea <__bad_interrupt>
  14:	6a c0       	rjmp	.+212    	; 0xea <__bad_interrupt>
  16:	69 c0       	rjmp	.+210    	; 0xea <__bad_interrupt>
  18:	68 c0       	rjmp	.+208    	; 0xea <__bad_interrupt>
  1a:	67 c0       	rjmp	.+206    	; 0xea <__bad_interrupt>
  1c:	66 c0       	rjmp	.+204    	; 0xea <__bad_interrupt>

0000001e <__trampolines_end>:
  1e:	05 01       	movw	r0, r10
  20:	09 05       	cpc	r16, r9
  22:	a1 01       	movw	r20, r2
  24:	09 01       	movw	r0, r18
  26:	a1 00       	.word	0x00a1	; ????
  28:	09 30       	cpi	r16, 0x09	; 9
  2a:	09 31       	cpi	r16, 0x19	; 25
  2c:	15 00       	.word	0x0015	; ????
  2e:	26 ff       	sbrs	r18, 6
  30:	00 75       	andi	r16, 0x50	; 80
  32:	08 95       	ret
  34:	04 81       	ldd	r16, Z+4	; 0x04
  36:	02 c0       	rjmp	.+4      	; 0x3c <__trampolines_end+0x1e>
  38:	05 09       	sbc	r16, r5
  3a:	19 01       	movw	r2, r18
  3c:	29 08       	sbc	r2, r9
  3e:	15 00       	.word	0x0015	; ????
  40:	25 01       	movw	r4, r10
  42:	75 01       	movw	r14, r10
  44:	95 08       	sbc	r9, r5
  46:	81 02       	muls	r24, r17
  48:	c0 09       	sbc	r28, r0

00000049 <usbDescriptorConfiguration>:
  49:	09 02 22 00 01 01 00 80 32 09 04 00 00 01 03 00     ..".....2.......
  59:	00 00 09 21 01 01 00 01 22 2b 00 07 05 81 03 08     ...!...."+......
  69:	00 0a                                               ..

0000006b <usbDescriptorDevice>:
  6b:	12 01 10 01 00 00 00 08 09 12 a7 eb 00 02 01 02     ................
  7b:	00 01                                               ..

0000007d <usbDescriptorStringDevice>:
  7d:	12 03 55 00 53 00 42 00 73 00 63 00 6f 00 70 00     ..U.S.B.s.c.o.p.
  8d:	65 00                                               e.

0000008f <usbDescriptorStringVendor>:
  8f:	20 03 56 00 69 00 63 00 74 00 6f 00 72 00 47 00      .V.i.c.t.o.r.G.
  9f:	72 00 69 00 67 00 6f 00 72 00 79 00 65 00 76 00     r.i.g.o.r.y.e.v.

000000af <usbDescriptorString0>:
  af:	04 03 09 04 00                                      .....

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf e5       	ldi	r28, 0x5F	; 95
  ba:	d2 e0       	ldi	r29, 0x02	; 2
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	10 e0       	ldi	r17, 0x00	; 0
  c2:	a0 e6       	ldi	r26, 0x60	; 96
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	ee e8       	ldi	r30, 0x8E	; 142
  c8:	f8 e0       	ldi	r31, 0x08	; 8
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a2 36       	cpi	r26, 0x62	; 98
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	20 e0       	ldi	r18, 0x00	; 0
  d8:	a2 e6       	ldi	r26, 0x62	; 98
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a6 3a       	cpi	r26, 0xA6	; 166
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	f0 d1       	rcall	.+992    	; 0x4c8 <main>
  e8:	d0 c3       	rjmp	.+1952   	; 0x88a <_exit>

000000ea <__bad_interrupt>:
  ea:	8a cf       	rjmp	.-236    	; 0x0 <__vectors>

000000ec <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
  ec:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
  ee:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
  f0:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
  f2:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
  f4:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
  f6:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
  f8:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
  fa:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
  fc:	09 c0       	rjmp	.+18     	; 0x110 <usbCrcLoopEntry>

000000fe <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
  fe:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
 100:	82 27       	eor	r24, r18

00000102 <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
 102:	97 95       	ror	r25
    ror     resCrcL
 104:	87 95       	ror	r24
    brcs    usbCrcNoXor
 106:	10 f0       	brcs	.+4      	; 0x10c <usbCrcNoXor>
    eor     resCrcL, polyL
 108:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
 10a:	95 27       	eor	r25, r21

0000010c <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
 10c:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
 10e:	c8 f3       	brcs	.-14     	; 0x102 <usbCrcBitLoop>

00000110 <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
 110:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
 112:	a8 f3       	brcs	.-22     	; 0xfe <usbCrcByteLoop>

00000114 <usbCrcReady>:
usbCrcReady:
    ret
 114:	08 95       	ret

00000116 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 116:	ea df       	rcall	.-44     	; 0xec <usbCrc16>
    st      ptr+, resCrcL
 118:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 11a:	9d 93       	st	X+, r25
    ret
 11c:	08 95       	ret

0000011e <usbMeasureFrameLength>:

; extern unsigned usbMeasurePacketLength(void);
; returns time between two idle strobes in multiples of 7 CPU clocks
.global usbMeasureFrameLength
usbMeasureFrameLength:
    ldi     cntH, 6         ; wait ~ 10 ms for D- == 0
 11e:	a6 e0       	ldi	r26, 0x06	; 6
    clr     cnt16L
 120:	88 27       	eor	r24, r24
    clr     cnt16H
 122:	99 27       	eor	r25, r25

00000124 <usbMFTime16>:
usbMFTime16:
    dec     cntH
 124:	aa 95       	dec	r26
    breq    usbMFTimeout
 126:	69 f0       	breq	.+26     	; 0x142 <usbMFTimeout>

00000128 <usbMFWaitStrobe>:
usbMFWaitStrobe:            ; first wait for D- == 0 (idle strobe)
    sbiw    cnt16, 1        ;[0] [6]
 128:	01 97       	sbiw	r24, 0x01	; 1
    breq    usbMFTime16     ;[2]
 12a:	e1 f3       	breq	.-8      	; 0x124 <usbMFTime16>
    sbic    USBIN, USBMINUS ;[3]
 12c:	b0 99       	sbic	0x16, 0	; 22
    rjmp    usbMFWaitStrobe ;[4]
 12e:	fc cf       	rjmp	.-8      	; 0x128 <usbMFWaitStrobe>

00000130 <usbMFWaitIdle>:
usbMFWaitIdle:              ; then wait until idle again
    sbis    USBIN, USBMINUS ;1 wait for D- == 1
 130:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    usbMFWaitIdle   ;2
 132:	fe cf       	rjmp	.-4      	; 0x130 <usbMFWaitIdle>
    ldi     cnt16L, 1       ;1 represents cycles so far
 134:	81 e0       	ldi	r24, 0x01	; 1
    clr     cnt16H          ;1
 136:	99 27       	eor	r25, r25

00000138 <usbMFWaitLoop>:
usbMFWaitLoop:
    in      cntH, USBIN     ;[0] [7]
 138:	a6 b3       	in	r26, 0x16	; 22
    adiw    cnt16, 1        ;[1]
 13a:	01 96       	adiw	r24, 0x01	; 1
    breq    usbMFTimeout    ;[3]
 13c:	11 f0       	breq	.+4      	; 0x142 <usbMFTimeout>
    andi    cntH, USBMASK   ;[4]
 13e:	a5 70       	andi	r26, 0x05	; 5
    brne    usbMFWaitLoop   ;[5]
 140:	d9 f7       	brne	.-10     	; 0x138 <usbMFWaitLoop>

00000142 <usbMFTimeout>:
usbMFTimeout:
#if resL != cnt16L
    mov     resL, cnt16L
    mov     resH, cnt16H
#endif
    ret
 142:	08 95       	ret

00000144 <__vector_1>:
;max allowable interrupt latency: 34 cycles -> max 25 cycles interrupt disable
;max stack usage: [ret(2), YL, SREG, YH, shift, x1, x2, x3, cnt, x4] = 11 bytes
;Numbers in brackets are maximum cycles since SOF.
USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], YH, shift, x1, x2, x3, cnt
    push    YL              ;2 [35] push only what is necessary to sync with edge ASAP
 144:	cf 93       	push	r28
    in      YL, SREG        ;1 [37]
 146:	cf b7       	in	r28, 0x3f	; 63
    push    YL              ;2 [39]
 148:	cf 93       	push	r28

0000014a <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
 14a:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
 14c:	b0 9b       	sbis	0x16, 0	; 22
    brne    waitForJ        ; just make sure we have ANY timeout
 14e:	e9 f7       	brne	.-6      	; 0x14a <waitForJ>

00000150 <waitForK>:
waitForK:
;The following code results in a sampling window of 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS
 150:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
 152:	09 c0       	rjmp	.+18     	; 0x166 <foundK>
    sbis    USBIN, USBMINUS
 154:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
 156:	07 c0       	rjmp	.+14     	; 0x166 <foundK>
    sbis    USBIN, USBMINUS
 158:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
 15a:	05 c0       	rjmp	.+10     	; 0x166 <foundK>
    sbis    USBIN, USBMINUS
 15c:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
 15e:	03 c0       	rjmp	.+6      	; 0x166 <foundK>
    sbis    USBIN, USBMINUS
 160:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
 162:	01 c0       	rjmp	.+2      	; 0x166 <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
 164:	a3 c0       	rjmp	.+326    	; 0x2ac <sofError>

00000166 <foundK>:
foundK:
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 4 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    YH                  ;2 [2]
 166:	df 93       	push	r29
    lds     YL, usbInputBufOffset;2 [4]
 168:	c0 91 89 00 	lds	r28, 0x0089
    clr     YH                  ;1 [5]
 16c:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));1 [6]
 16e:	c0 57       	subi	r28, 0x70	; 112
    sbci    YH, hi8(-(usbRxBuf));1 [7]
 170:	df 4f       	sbci	r29, 0xFF	; 255

    sbis    USBIN, USBMINUS ;1 [8] we want two bits K [sample 1 cycle too early]
 172:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    haveTwoBitsK    ;2 [10]
 174:	02 c0       	rjmp	.+4      	; 0x17a <haveTwoBitsK>
    pop     YH              ;2 [11] undo the push from before
 176:	df 91       	pop	r29
    rjmp    waitForK        ;2 [13] this was not the end of sync, retry
 178:	eb cf       	rjmp	.-42     	; 0x150 <waitForK>

0000017a <haveTwoBitsK>:
haveTwoBitsK:
;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
    push    shift           ;2 [16]
 17a:	2f 93       	push	r18
    push    x1              ;2 [12]
 17c:	0f 93       	push	r16
    push    x2              ;2 [14]
 17e:	1f 93       	push	r17

    in      x1, USBIN       ;1 [17] <-- sample bit 0
 180:	06 b3       	in	r16, 0x16	; 22
    ldi     shift, 0xff     ;1 [18]
 182:	2f ef       	ldi	r18, 0xFF	; 255
    bst     x1, USBMINUS    ;1 [19]
 184:	00 fb       	bst	r16, 0
    bld     shift, 0        ;1 [20]
 186:	20 f9       	bld	r18, 0
    push    x3              ;2 [22]
 188:	4f 93       	push	r20
    push    cnt             ;2 [24]
 18a:	3f 93       	push	r19
    
    in      x2, USBIN       ;1 [25] <-- sample bit 1
 18c:	16 b3       	in	r17, 0x16	; 22
    ser     x3              ;1 [26] [inserted init instruction]
 18e:	4f ef       	ldi	r20, 0xFF	; 255
    eor     x1, x2          ;1 [27]
 190:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;1 [28]
 192:	00 fb       	bst	r16, 0
    bld     shift, 1        ;1 [29]
 194:	21 f9       	bld	r18, 1
    ldi     cnt, USB_BUFSIZE;1 [30] [inserted init instruction]
 196:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit2          ;2 [32]
 198:	31 c0       	rjmp	.+98     	; 0x1fc <rxbit2>

0000019a <unstuff0>:
;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------

unstuff0:               ;1 (branch taken)
    andi    x3, ~0x01   ;1 [15]
 19a:	4e 7f       	andi	r20, 0xFE	; 254
    mov     x1, x2      ;1 [16] x2 contains last sampled (stuffed) bit
 19c:	01 2f       	mov	r16, r17
    in      x2, USBIN   ;1 [17] <-- sample bit 1 again
 19e:	16 b3       	in	r17, 0x16	; 22
    ori     shift, 0x01 ;1 [18]
 1a0:	21 60       	ori	r18, 0x01	; 1
    rjmp    didUnstuff0 ;2 [20]
 1a2:	28 c0       	rjmp	.+80     	; 0x1f4 <didUnstuff0>

000001a4 <unstuff1>:

unstuff1:               ;1 (branch taken)
    mov     x2, x1      ;1 [21] x1 contains last sampled (stuffed) bit
 1a4:	10 2f       	mov	r17, r16
    andi    x3, ~0x02   ;1 [22]
 1a6:	4d 7f       	andi	r20, 0xFD	; 253
    ori     shift, 0x02 ;1 [23]
 1a8:	22 60       	ori	r18, 0x02	; 2
    nop                 ;1 [24]
 1aa:	00 00       	nop
    in      x1, USBIN   ;1 [25] <-- sample bit 2 again
 1ac:	06 b3       	in	r16, 0x16	; 22
    rjmp    didUnstuff1 ;2 [27]
 1ae:	29 c0       	rjmp	.+82     	; 0x202 <didUnstuff1>

000001b0 <unstuff2>:

unstuff2:               ;1 (branch taken)
    andi    x3, ~0x04   ;1 [29]
 1b0:	4b 7f       	andi	r20, 0xFB	; 251
    ori     shift, 0x04 ;1 [30]
 1b2:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2      ;1 [31] x2 contains last sampled (stuffed) bit
 1b4:	01 2f       	mov	r16, r17
    nop                 ;1 [32]
 1b6:	00 00       	nop
    in      x2, USBIN   ;1 [33] <-- sample bit 3
 1b8:	16 b3       	in	r17, 0x16	; 22
    rjmp    didUnstuff2 ;2 [35]
 1ba:	2b c0       	rjmp	.+86     	; 0x212 <didUnstuff2>

000001bc <unstuff3>:

unstuff3:               ;1 (branch taken)
    in      x2, USBIN   ;1 [34] <-- sample stuffed bit 3 [one cycle too late]
 1bc:	16 b3       	in	r17, 0x16	; 22
    andi    x3, ~0x08   ;1 [35]
 1be:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08 ;1 [36]
 1c0:	28 60       	ori	r18, 0x08	; 8
    rjmp    didUnstuff3 ;2 [38]
 1c2:	2a c0       	rjmp	.+84     	; 0x218 <didUnstuff3>

000001c4 <unstuff4>:

unstuff4:               ;1 (branch taken)
    andi    x3, ~0x10   ;1 [40]
 1c4:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN   ;1 [41] <-- sample stuffed bit 4
 1c6:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x10 ;1 [42]
 1c8:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4 ;2 [44]
 1ca:	2c c0       	rjmp	.+88     	; 0x224 <didUnstuff4>

000001cc <unstuff5>:

unstuff5:               ;1 (branch taken)
    andi    x3, ~0x20   ;1 [48]
 1cc:	4f 7d       	andi	r20, 0xDF	; 223
    in      x2, USBIN   ;1 [49] <-- sample stuffed bit 5
 1ce:	16 b3       	in	r17, 0x16	; 22
    ori     shift, 0x20 ;1 [50]
 1d0:	20 62       	ori	r18, 0x20	; 32
    rjmp    didUnstuff5 ;2 [52]
 1d2:	2f c0       	rjmp	.+94     	; 0x232 <didUnstuff5>

000001d4 <unstuff6>:

unstuff6:               ;1 (branch taken)
    andi    x3, ~0x40   ;1 [56]
 1d4:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN   ;1 [57] <-- sample stuffed bit 6
 1d6:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x40 ;1 [58]
 1d8:	20 64       	ori	r18, 0x40	; 64
    rjmp    didUnstuff6 ;2 [60]
 1da:	32 c0       	rjmp	.+100    	; 0x240 <didUnstuff6>

000001dc <rxLoop>:
; bit 4:    none
; bit 5:    none
; bit 6:    none
; bit 7:    jump, eor
rxLoop:
    eor     x3, shift   ;1 [0] reconstruct: x3 is 0 at bit locations we changed, 1 at others
 1dc:	42 27       	eor	r20, r18
    in      x1, USBIN   ;1 [1] <-- sample bit 0
 1de:	06 b3       	in	r16, 0x16	; 22
    st      y+, x3      ;2 [3] store data
 1e0:	49 93       	st	Y+, r20
    ser     x3          ;1 [4]
 1e2:	4f ef       	ldi	r20, 0xFF	; 255
    nop                 ;1 [5]
 1e4:	00 00       	nop
    eor     x2, x1      ;1 [6]
 1e6:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [7]
 1e8:	10 fb       	bst	r17, 0
    bld     shift, 0    ;1 [8]
 1ea:	20 f9       	bld	r18, 0
    in      x2, USBIN   ;1 [9] <-- sample bit 1 (or possibly bit 0 stuffed)
 1ec:	16 b3       	in	r17, 0x16	; 22
    andi    x2, USBMASK ;1 [10]
 1ee:	15 70       	andi	r17, 0x05	; 5
    breq    se0         ;1 [11] SE0 check for bit 1
 1f0:	c9 f1       	breq	.+114    	; 0x264 <se0>
    andi    shift, 0xf9 ;1 [12]
 1f2:	29 7f       	andi	r18, 0xF9	; 249

000001f4 <didUnstuff0>:
didUnstuff0:
    breq    unstuff0    ;1 [13]
 1f4:	91 f2       	breq	.-92     	; 0x19a <unstuff0>
    eor     x1, x2      ;1 [14]
 1f6:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [15]
 1f8:	00 fb       	bst	r16, 0
    bld     shift, 1    ;1 [16]
 1fa:	21 f9       	bld	r18, 1

000001fc <rxbit2>:
rxbit2:
    in      x1, USBIN   ;1 [17] <-- sample bit 2 (or possibly bit 1 stuffed)
 1fc:	06 b3       	in	r16, 0x16	; 22
    andi    shift, 0xf3 ;1 [18]
 1fe:	23 7f       	andi	r18, 0xF3	; 243
    breq    unstuff1    ;1 [19] do remaining work for bit 1
 200:	89 f2       	breq	.-94     	; 0x1a4 <unstuff1>

00000202 <didUnstuff1>:
didUnstuff1:
    subi    cnt, 1      ;1 [20]
 202:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow    ;1 [21] loop control
 204:	58 f1       	brcs	.+86     	; 0x25c <overflow>
    eor     x2, x1      ;1 [22]
 206:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [23]
 208:	10 fb       	bst	r17, 0
    bld     shift, 2    ;1 [24]
 20a:	22 f9       	bld	r18, 2
    in      x2, USBIN   ;1 [25] <-- sample bit 3 (or possibly bit 2 stuffed)
 20c:	16 b3       	in	r17, 0x16	; 22
    andi    shift, 0xe7 ;1 [26]
 20e:	27 7e       	andi	r18, 0xE7	; 231
    breq    unstuff2    ;1 [27]
 210:	79 f2       	breq	.-98     	; 0x1b0 <unstuff2>

00000212 <didUnstuff2>:
didUnstuff2:
    eor     x1, x2      ;1 [28]
 212:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [29]
 214:	00 fb       	bst	r16, 0
    bld     shift, 3    ;1 [30]
 216:	23 f9       	bld	r18, 3

00000218 <didUnstuff3>:
didUnstuff3:
    andi    shift, 0xcf ;1 [31]
 218:	2f 7c       	andi	r18, 0xCF	; 207
    breq    unstuff3    ;1 [32]
 21a:	81 f2       	breq	.-96     	; 0x1bc <unstuff3>
    in      x1, USBIN   ;1 [33] <-- sample bit 4
 21c:	06 b3       	in	r16, 0x16	; 22
    eor     x2, x1      ;1 [34]
 21e:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [35]
 220:	10 fb       	bst	r17, 0
    bld     shift, 4    ;1 [36]
 222:	24 f9       	bld	r18, 4

00000224 <didUnstuff4>:
didUnstuff4:
    andi    shift, 0x9f ;1 [37]
 224:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4    ;1 [38]
 226:	71 f2       	breq	.-100    	; 0x1c4 <unstuff4>
    nop2                ;2 [40]
 228:	00 c0       	rjmp	.+0      	; 0x22a <didUnstuff4+0x6>
    in      x2, USBIN   ;1 [41] <-- sample bit 5
 22a:	16 b3       	in	r17, 0x16	; 22
    eor     x1, x2      ;1 [42]
 22c:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [43]
 22e:	00 fb       	bst	r16, 0
    bld     shift, 5    ;1 [44]
 230:	25 f9       	bld	r18, 5

00000232 <didUnstuff5>:
didUnstuff5:
    andi    shift, 0x3f ;1 [45]
 232:	2f 73       	andi	r18, 0x3F	; 63
    breq    unstuff5    ;1 [46]
 234:	59 f2       	breq	.-106    	; 0x1cc <unstuff5>
    nop2                ;2 [48]
 236:	00 c0       	rjmp	.+0      	; 0x238 <didUnstuff5+0x6>
    in      x1, USBIN   ;1 [49] <-- sample bit 6
 238:	06 b3       	in	r16, 0x16	; 22
    eor     x2, x1      ;1 [50]
 23a:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [51]
 23c:	10 fb       	bst	r17, 0
    bld     shift, 6    ;1 [52]
 23e:	26 f9       	bld	r18, 6

00000240 <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0x02 ;1 [53]
 240:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6    ;1 [54]
 242:	40 f2       	brcs	.-112    	; 0x1d4 <unstuff6>
    nop2                ;2 [56]
 244:	00 c0       	rjmp	.+0      	; 0x246 <didUnstuff6+0x6>
    in      x2, USBIN   ;1 [57] <-- sample bit 7
 246:	16 b3       	in	r17, 0x16	; 22
    eor     x1, x2      ;1 [58]
 248:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [59]
 24a:	00 fb       	bst	r16, 0
    bld     shift, 7    ;1 [60]
 24c:	27 f9       	bld	r18, 7

0000024e <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0x04 ;1 [61]
 24e:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop      ;2 [63] loop control
 250:	28 f6       	brcc	.-118    	; 0x1dc <rxLoop>

00000252 <unstuff7>:
unstuff7:
    andi    x3, ~0x80   ;1 [63]
 252:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80 ;1 [64]
 254:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN   ;1 [65] <-- sample stuffed bit 7
 256:	16 b3       	in	r17, 0x16	; 22
    nop                 ;1 [66]
 258:	00 00       	nop
    rjmp    didUnstuff7 ;2 [68]
 25a:	f9 cf       	rjmp	.-14     	; 0x24e <didUnstuff7>

0000025c <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 25c:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
 25e:	1a bf       	out	0x3a, r17	; 58

00000260 <ignorePacket>:
ignorePacket:
    clr     token
 260:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 262:	19 c0       	rjmp	.+50     	; 0x296 <handleSetupOrOut>

00000264 <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 264:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 266:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 268:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 26a:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 26c:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
 26e:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
 270:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
 272:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 274:	f9 f0       	breq	.+62     	; 0x2b4 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 276:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 278:	e9 f0       	breq	.+58     	; 0x2b4 <handleData>
    lds     shift, usbDeviceAddr;[17]
 27a:	20 91 87 00 	lds	r18, 0x0087
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
 27e:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
 280:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 282:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 284:	ed cf       	rjmp	.-38     	; 0x260 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
 286:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
 288:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
 28a:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 28c:	41 f1       	breq	.+80     	; 0x2de <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 28e:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 290:	11 f0       	breq	.+4      	; 0x296 <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 292:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
 294:	29 f7       	brne	.-54     	; 0x260 <ignorePacket>

00000296 <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 296:	00 93 8e 00 	sts	0x008E, r16

0000029a <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
 29a:	3f 91       	pop	r19
 29c:	4f 91       	pop	r20
 29e:	1f 91       	pop	r17
 2a0:	0f 91       	pop	r16
 2a2:	2f 91       	pop	r18
 2a4:	df 91       	pop	r29
    USB_LOAD_PENDING(YL)        ;[49]
 2a6:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 2a8:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
 2aa:	4f cf       	rjmp	.-354    	; 0x14a <waitForJ>

000002ac <sofError>:
sofError:
    POP_RETI                    ;macro call
 2ac:	cf 91       	pop	r28
 2ae:	cf bf       	out	0x3f, r28	; 63
 2b0:	cf 91       	pop	r28
    reti
 2b2:	18 95       	reti

000002b4 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
 2b4:	20 91 8e 00 	lds	r18, 0x008E
    tst     shift               ;[20]
 2b8:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
 2ba:	79 f3       	breq	.-34     	; 0x29a <doReturn>
    lds     x2, usbRxLen        ;[22]
 2bc:	10 91 8c 00 	lds	r17, 0x008C
    tst     x2                  ;[24]
 2c0:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 2c2:	69 f5       	brne	.+90     	; 0x31e <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
 2c4:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 2c6:	6a f1       	brmi	.+90     	; 0x322 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 2c8:	30 93 8c 00 	sts	0x008C, r19
    sts     usbRxToken, shift   ;[30]
 2cc:	20 93 88 00 	sts	0x0088, r18
    lds     x2, usbInputBufOffset;[32] swap buffers
 2d0:	10 91 89 00 	lds	r17, 0x0089
    ldi     cnt, USB_BUFSIZE    ;[34]
 2d4:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 2d6:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
 2d8:	30 93 89 00 	sts	0x0089, r19
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 2dc:	22 c0       	rjmp	.+68     	; 0x322 <sendAckAndReti>

000002de <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
 2de:	00 91 8c 00 	lds	r16, 0x008C
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 2e2:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
 2e4:	e4 f4       	brge	.+56     	; 0x31e <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 2e6:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
 2e8:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
 2ea:	49 f4       	brne	.+18     	; 0x2fe <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
 2ec:	30 91 61 00 	lds	r19, 0x0061
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 2f0:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 2f2:	19 c0       	rjmp	.+50     	; 0x326 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 2f4:	00 93 61 00 	sts	0x0061, r16
    ldi     YL, lo8(usbTxBuf)   ;[43]
 2f8:	c0 e7       	ldi	r28, 0x70	; 112
    ldi     YH, hi8(usbTxBuf)   ;[44]
 2fa:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 2fc:	18 c0       	rjmp	.+48     	; 0x32e <usbSendAndReti>

000002fe <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
 2fe:	30 91 7b 00 	lds	r19, 0x007B
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
 302:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
 304:	10 c0       	rjmp	.+32     	; 0x326 <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
 306:	00 93 7b 00 	sts	0x007B, r16
    ldi     YL, lo8(usbTxBuf1)  ;[46]
 30a:	cc e7       	ldi	r28, 0x7C	; 124
    ldi     YH, hi8(usbTxBuf1)  ;[47]
 30c:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
 30e:	0f c0       	rjmp	.+30     	; 0x32e <usbSendAndReti>

00000310 <stuffN1Delay>:
;----------------------------------------------------------------------------

txByteLoop:
txBitloop:
stuffN1Delay:                   ;     [03]
    ror     shift               ;[-5] [11] [59]
 310:	27 95       	ror	r18
    brcc    doExorN1            ;[-4]      [60]
 312:	a8 f4       	brcc	.+42     	; 0x33e <doExorN1>
    subi    x4, 1               ;[-3]
 314:	51 50       	subi	r21, 0x01	; 1
    brne    commonN1            ;[-2]
 316:	a9 f4       	brne	.+42     	; 0x342 <commonN1>
    lsl     shift               ;[-1] compensate ror after rjmp stuffDelay
 318:	22 0f       	add	r18, r18
    nop                         ;[00] stuffing consists of just waiting 8 cycles
 31a:	00 00       	nop
    rjmp    stuffN1Delay        ;[01] after ror, C bit is reliably clear
 31c:	f9 cf       	rjmp	.-14     	; 0x310 <stuffN1Delay>

0000031e <sendNakAndReti>:

sendNakAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_NAK      ;1 [-18]
 31e:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    usbSendX3           ;2 [-16]
 320:	03 c0       	rjmp	.+6      	; 0x328 <usbSendX3>

00000322 <sendAckAndReti>:
sendAckAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_ACK      ;1 [-18]
 322:	42 ed       	ldi	r20, 0xD2	; 210
    rjmp    usbSendX3           ;2 [-16]
 324:	01 c0       	rjmp	.+2      	; 0x328 <usbSendX3>

00000326 <sendCntAndReti>:
sendCntAndReti:                 ;0 [-17] 17 cycles until SOP
    mov     x3, cnt             ;1 [-16]
 326:	43 2f       	mov	r20, r19

00000328 <usbSendX3>:
usbSendX3:                      ;0 [-16]
    ldi     YL, 20              ;1 [-15] 'x3' is R20
 328:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0               ;1 [-14]
 32a:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2              ;1 [-13]
 32c:	32 e0       	ldi	r19, 0x02	; 2

0000032e <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte
;uses: x1...x2, x4, shift, cnt, Y [x1 = mirror USBOUT, x2 = USBMASK, x4 = bitstuff cnt]
;Numbers in brackets are time since first bit of sync pattern is sent (start of instruction)
usbSendAndReti:
    in      x2, USBDDR          ;[-12] 12 cycles until SOP
 32e:	17 b3       	in	r17, 0x17	; 23
    ori     x2, USBMASK         ;[-11]
 330:	15 60       	ori	r17, 0x05	; 5
    sbi     USBOUT, USBMINUS    ;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 332:	c0 9a       	sbi	0x18, 0	; 24
    out     USBDDR, x2          ;[-8] <--- acquire bus
 334:	17 bb       	out	0x17, r17	; 23
    in      x1, USBOUT          ;[-7] port mirror for tx loop
 336:	08 b3       	in	r16, 0x18	; 24
    ldi     shift, 0x40         ;[-6] sync byte is first byte sent (we enter loop after ror)
 338:	20 e4       	ldi	r18, 0x40	; 64
    ldi     x2, USBMASK         ;[-5]
 33a:	15 e0       	ldi	r17, 0x05	; 5
    push    x4                  ;[-4]
 33c:	5f 93       	push	r21

0000033e <doExorN1>:
doExorN1:
    eor     x1, x2              ;[-2] [06] [62]
 33e:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[-1] [07] [63]
 340:	56 e0       	ldi	r21, 0x06	; 6

00000342 <commonN1>:
commonN1:
stuffN2Delay:
    out     USBOUT, x1          ;[00] [08] [64] <--- set bit
 342:	08 bb       	out	0x18, r16	; 24
    ror     shift               ;[01]
 344:	27 95       	ror	r18
    brcc    doExorN2            ;[02]
 346:	20 f4       	brcc	.+8      	; 0x350 <doExorN2>
    subi    x4, 1               ;[03]
 348:	51 50       	subi	r21, 0x01	; 1
    brne    commonN2            ;[04]
 34a:	21 f4       	brne	.+8      	; 0x354 <commonN2>
    lsl     shift               ;[05] compensate ror after rjmp stuffDelay
 34c:	22 0f       	add	r18, r18
    rjmp    stuffN2Delay        ;[06] after ror, C bit is reliably clear
 34e:	f9 cf       	rjmp	.-14     	; 0x342 <commonN1>

00000350 <doExorN2>:
doExorN2:
    eor     x1, x2              ;[04] [12]
 350:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[05] [13]
 352:	56 e0       	ldi	r21, 0x06	; 6

00000354 <commonN2>:
commonN2:
    nop                         ;[06] [14]
 354:	00 00       	nop
    subi    cnt, 171            ;[07] [15] trick: (3 * 171) & 0xff = 1
 356:	3b 5a       	subi	r19, 0xAB	; 171
    out     USBOUT, x1          ;[08] [16] <--- set bit
 358:	08 bb       	out	0x18, r16	; 24
    brcs    txBitloop           ;[09]      [25] [41]
 35a:	d0 f2       	brcs	.-76     	; 0x310 <stuffN1Delay>

0000035c <stuff6Delay>:

stuff6Delay:
    ror     shift               ;[42] [50]
 35c:	27 95       	ror	r18
    brcc    doExor6             ;[43]
 35e:	28 f4       	brcc	.+10     	; 0x36a <doExor6>
    subi    x4, 1               ;[44]
 360:	51 50       	subi	r21, 0x01	; 1
    brne    common6             ;[45]
 362:	29 f4       	brne	.+10     	; 0x36e <common6>
    lsl     shift               ;[46] compensate ror after rjmp stuffDelay
 364:	22 0f       	add	r18, r18
    nop                         ;[47] stuffing consists of just waiting 8 cycles
 366:	00 00       	nop
    rjmp    stuff6Delay         ;[48] after ror, C bit is reliably clear
 368:	f9 cf       	rjmp	.-14     	; 0x35c <stuff6Delay>

0000036a <doExor6>:
doExor6:
    eor     x1, x2              ;[45] [53]
 36a:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[46]
 36c:	56 e0       	ldi	r21, 0x06	; 6

0000036e <common6>:
common6:
stuff7Delay:
    ror     shift               ;[47] [55]
 36e:	27 95       	ror	r18
    out     USBOUT, x1          ;[48] <--- set bit
 370:	08 bb       	out	0x18, r16	; 24
    brcc    doExor7             ;[49]
 372:	20 f4       	brcc	.+8      	; 0x37c <doExor7>
    subi    x4, 1               ;[50]
 374:	51 50       	subi	r21, 0x01	; 1
    brne    common7             ;[51]
 376:	21 f4       	brne	.+8      	; 0x380 <common7>
    lsl     shift               ;[52] compensate ror after rjmp stuffDelay
 378:	22 0f       	add	r18, r18
    rjmp    stuff7Delay         ;[53] after ror, C bit is reliably clear
 37a:	f9 cf       	rjmp	.-14     	; 0x36e <common6>

0000037c <doExor7>:
doExor7:
    eor     x1, x2              ;[51] [59]
 37c:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[52]
 37e:	56 e0       	ldi	r21, 0x06	; 6

00000380 <common7>:
common7:
    ld      shift, y+           ;[53]
 380:	29 91       	ld	r18, Y+
    tst     cnt                 ;[55]
 382:	33 23       	and	r19, r19
    out     USBOUT, x1          ;[56] <--- set bit
 384:	08 bb       	out	0x18, r16	; 24
    brne    txByteLoop          ;[57]
 386:	21 f6       	brne	.-120    	; 0x310 <stuffN1Delay>

;make SE0:
    cbr     x1, USBMASK         ;[58] prepare SE0 [spec says EOP may be 15 to 18 cycles]
 388:	0a 7f       	andi	r16, 0xFA	; 250
    lds     x2, usbNewDeviceAddr;[59]
 38a:	10 91 8d 00 	lds	r17, 0x008D
    lsl     x2                  ;[61] we compare with left shifted address
 38e:	11 0f       	add	r17, r17
    subi    YL, 2 + 20          ;[62] Only assign address on data packets, not ACK/NAK in x3
 390:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0               ;[63]
 392:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1          ;[00] <-- out SE0 -- from now 2 bits = 16 cycles until bus idle
 394:	08 bb       	out	0x18, r16	; 24
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign      ;[01]
 396:	11 f0       	breq	.+4      	; 0x39c <skipAddrAssign>
    sts     usbDeviceAddr, x2   ; if not skipped: SE0 is one cycle longer
 398:	10 93 87 00 	sts	0x0087, r17

0000039c <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[03] int0 occurred during TX -- clear pending flag
 39c:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[04]
 39e:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE         ;[05]
 3a0:	01 60       	ori	r16, 0x01	; 1
    in      x2, USBDDR          ;[06]
 3a2:	17 b3       	in	r17, 0x17	; 23
    cbr     x2, USBMASK         ;[07] set both pins to input
 3a4:	1a 7f       	andi	r17, 0xFA	; 250
    mov     x3, x1              ;[08]
 3a6:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK         ;[09] configure no pullup on both pins
 3a8:	4a 7f       	andi	r20, 0xFA	; 250
    pop     x4                  ;[10]
 3aa:	5f 91       	pop	r21
    nop2                        ;[12]
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <skipAddrAssign+0x12>
    nop2                        ;[14]
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <skipAddrAssign+0x14>
    out     USBOUT, x1          ;[16] <-- out J (idle) -- end of SE0 (EOP signal)
 3b0:	08 bb       	out	0x18, r16	; 24
    out     USBDDR, x2          ;[17] <-- release bus now
 3b2:	17 bb       	out	0x17, r17	; 23
    out     USBOUT, x3          ;[18] <-- ensure no pull-up resistors are active
 3b4:	48 bb       	out	0x18, r20	; 24
    rjmp    doReturn
 3b6:	71 cf       	rjmp	.-286    	; 0x29a <doReturn>

000003b8 <buildReport>:
/* ------------------------------------------------------------------------- */

static void buildReport(void)
{

	reportBuffer[0] = adcval1>>8;
 3b8:	80 91 64 00 	lds	r24, 0x0064
 3bc:	90 91 65 00 	lds	r25, 0x0065
 3c0:	90 93 69 00 	sts	0x0069, r25
	reportBuffer[1] = adcval1;
 3c4:	80 93 6a 00 	sts	0x006A, r24
	reportBuffer[2] = adcval2>>8;
 3c8:	80 91 62 00 	lds	r24, 0x0062
 3cc:	90 91 63 00 	lds	r25, 0x0063
 3d0:	90 93 6b 00 	sts	0x006B, r25
	reportBuffer[3] = adcval2;
 3d4:	80 93 6c 00 	sts	0x006C, r24
	reportBuffer[4] = 0x01;
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	80 93 6d 00 	sts	0x006D, r24
 3de:	08 95       	ret

000003e0 <usbFunctionSetup>:

uchar	usbFunctionSetup(uchar data[8])
{
usbRequest_t    *rq = (void *)data;

    usbMsgPtr = reportBuffer;
 3e0:	29 e6       	ldi	r18, 0x69	; 105
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	30 93 8b 00 	sts	0x008B, r19
 3e8:	20 93 8a 00 	sts	0x008A, r18
    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
 3ec:	fc 01       	movw	r30, r24
 3ee:	20 81       	ld	r18, Z
 3f0:	20 76       	andi	r18, 0x60	; 96
 3f2:	20 32       	cpi	r18, 0x20	; 32
 3f4:	c1 f4       	brne	.+48     	; 0x426 <usbFunctionSetup+0x46>
        if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
 3f6:	21 81       	ldd	r18, Z+1	; 0x01
 3f8:	21 30       	cpi	r18, 0x01	; 1
 3fa:	19 f4       	brne	.+6      	; 0x402 <usbFunctionSetup+0x22>
												   /* we only have one report type, so don't look at wValue */
            buildReport();
 3fc:	dd df       	rcall	.-70     	; 0x3b8 <buildReport>
            return sizeof(reportBuffer);
 3fe:	85 e0       	ldi	r24, 0x05	; 5
 400:	08 95       	ret
        }else if(rq->bRequest == USBRQ_HID_GET_IDLE){
 402:	22 30       	cpi	r18, 0x02	; 2
 404:	41 f4       	brne	.+16     	; 0x416 <usbFunctionSetup+0x36>
            usbMsgPtr = &idleRate;
 406:	88 e6       	ldi	r24, 0x68	; 104
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	90 93 8b 00 	sts	0x008B, r25
 40e:	80 93 8a 00 	sts	0x008A, r24
            return 1;
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	08 95       	ret
        }else if(rq->bRequest == USBRQ_HID_SET_IDLE){
 416:	2a 30       	cpi	r18, 0x0A	; 10
 418:	41 f4       	brne	.+16     	; 0x42a <usbFunctionSetup+0x4a>
            idleRate = rq->wValue.bytes[1];
 41a:	fc 01       	movw	r30, r24
 41c:	83 81       	ldd	r24, Z+3	; 0x03
 41e:	80 93 68 00 	sts	0x0068, r24
        }
    }else{
        /* no vendor specific requests implemented */
    }
	return 0;
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	08 95       	ret
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	08 95       	ret
 42a:	80 e0       	ldi	r24, 0x00	; 0
}
 42c:	08 95       	ret

0000042e <usbEventResetReady>:
ATTiny25, ATTiny45, ATTiny85), it may be useful to search for the optimum in
both regions.
*/

void    usbEventResetReady(void)
{
 42e:	df 92       	push	r13
 430:	ef 92       	push	r14
 432:	ff 92       	push	r15
 434:	0f 93       	push	r16
 436:	1f 93       	push	r17
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	08 e0       	ldi	r16, 0x08	; 8
 43e:	10 e0       	ldi	r17, 0x00	; 0
 * experimental purposes only!
 */
static void calibrateOscillator(void)
{
uchar       step = 128;
uchar       trialValue = 0, optimumValue;
 440:	e1 2c       	mov	r14, r1
 * the 12 MHz clock! Use the RC oscillator calibrated to 12 MHz for
 * experimental purposes only!
 */
static void calibrateOscillator(void)
{
uchar       step = 128;
 442:	68 94       	set
 444:	ff 24       	eor	r15, r15
 446:	f7 f8       	bld	r15, 7
uchar       trialValue = 0, optimumValue;
int         x, optimumDev, targetValue = (unsigned)(1499 * (double)F_CPU / 10.5e6 + 0.5);

    /* do a binary search: */
    do{
        OSCCAL = trialValue + step;
 448:	df 2c       	mov	r13, r15
 44a:	de 0c       	add	r13, r14
 44c:	d1 be       	out	0x31, r13	; 49
        x = usbMeasureFrameLength();    /* proportional to current real frequency */
 44e:	67 de       	rcall	.-818    	; 0x11e <usbMeasureFrameLength>
 450:	ec 01       	movw	r28, r24
        if(x < targetValue)             /* frequency still too low */
 452:	c1 3b       	cpi	r28, 0xB1	; 177
 454:	86 e0       	ldi	r24, 0x06	; 6
 456:	d8 07       	cpc	r29, r24
 458:	0c f4       	brge	.+2      	; 0x45c <usbEventResetReady+0x2e>
            trialValue += step;
 45a:	ed 2c       	mov	r14, r13
        step >>= 1;
 45c:	f6 94       	lsr	r15
 45e:	01 50       	subi	r16, 0x01	; 1
 460:	11 09       	sbc	r17, r1
    }while(step > 0);
 462:	01 15       	cp	r16, r1
 464:	11 05       	cpc	r17, r1
 466:	81 f7       	brne	.-32     	; 0x448 <usbEventResetReady+0x1a>
    /* We have a precision of +/- 1 for optimum OSCCAL here */
    /* now do a neighborhood search for optimum value */
    optimumValue = trialValue;
    optimumDev = x; /* this is certainly far away from optimum */
    for(OSCCAL = trialValue - 1; OSCCAL <= trialValue + 1; OSCCAL++){
 468:	8f ef       	ldi	r24, 0xFF	; 255
 46a:	8e 0d       	add	r24, r14
 46c:	81 bf       	out	0x31, r24	; 49
 46e:	81 b7       	in	r24, 0x31	; 49
 470:	0e 2d       	mov	r16, r14
 472:	10 e0       	ldi	r17, 0x00	; 0
 474:	0f 5f       	subi	r16, 0xFF	; 255
 476:	1f 4f       	sbci	r17, 0xFF	; 255
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	08 17       	cp	r16, r24
 47c:	19 07       	cpc	r17, r25
 47e:	bc f0       	brlt	.+46     	; 0x4ae <usbEventResetReady+0x80>
        x = usbMeasureFrameLength() - targetValue;
 480:	4e de       	rcall	.-868    	; 0x11e <usbMeasureFrameLength>
 482:	81 5b       	subi	r24, 0xB1	; 177
 484:	96 40       	sbci	r25, 0x06	; 6
 486:	9c 01       	movw	r18, r24
 488:	99 23       	and	r25, r25
 48a:	24 f4       	brge	.+8      	; 0x494 <usbEventResetReady+0x66>
 48c:	22 27       	eor	r18, r18
 48e:	33 27       	eor	r19, r19
 490:	28 1b       	sub	r18, r24
 492:	39 0b       	sbc	r19, r25
        if(x < 0)
            x = -x;
        if(x < optimumDev){
 494:	2c 17       	cp	r18, r28
 496:	3d 07       	cpc	r19, r29
 498:	14 f4       	brge	.+4      	; 0x49e <usbEventResetReady+0x70>
            optimumDev = x;
            optimumValue = OSCCAL;
 49a:	e1 b6       	in	r14, 0x31	; 49
    for(OSCCAL = trialValue - 1; OSCCAL <= trialValue + 1; OSCCAL++){
        x = usbMeasureFrameLength() - targetValue;
        if(x < 0)
            x = -x;
        if(x < optimumDev){
            optimumDev = x;
 49c:	e9 01       	movw	r28, r18
    }while(step > 0);
    /* We have a precision of +/- 1 for optimum OSCCAL here */
    /* now do a neighborhood search for optimum value */
    optimumValue = trialValue;
    optimumDev = x; /* this is certainly far away from optimum */
    for(OSCCAL = trialValue - 1; OSCCAL <= trialValue + 1; OSCCAL++){
 49e:	81 b7       	in	r24, 0x31	; 49
 4a0:	8f 5f       	subi	r24, 0xFF	; 255
 4a2:	81 bf       	out	0x31, r24	; 49
 4a4:	81 b7       	in	r24, 0x31	; 49
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	08 17       	cp	r16, r24
 4aa:	19 07       	cpc	r17, r25
 4ac:	4c f7       	brge	.-46     	; 0x480 <usbEventResetReady+0x52>
        if(x < optimumDev){
            optimumDev = x;
            optimumValue = OSCCAL;
        }
    }
    OSCCAL = optimumValue;
 4ae:	e1 be       	out	0x31, r14	; 49
*/

void    usbEventResetReady(void)
{
    calibrateOscillator();
    eeprom_write_byte(0, OSCCAL);   /* store the calibrated value in EEPROM */
 4b0:	61 b7       	in	r22, 0x31	; 49
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	db d1       	rcall	.+950    	; 0x86e <__eewr_byte_tn85>
}
 4b8:	df 91       	pop	r29
 4ba:	cf 91       	pop	r28
 4bc:	1f 91       	pop	r17
 4be:	0f 91       	pop	r16
 4c0:	ff 90       	pop	r15
 4c2:	ef 90       	pop	r14
 4c4:	df 90       	pop	r13
 4c6:	08 95       	ret

000004c8 <main>:
int main(void)
{
uchar   i;
uchar   calibrationValue;

    calibrationValue = eeprom_read_byte(0); /* calibration value from last time */
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	c8 d1       	rcall	.+912    	; 0x85e <__eerd_byte_tn85>
    if(calibrationValue != 0xff){
 4ce:	8f 3f       	cpi	r24, 0xFF	; 255
 4d0:	09 f0       	breq	.+2      	; 0x4d4 <main+0xc>
        OSCCAL = calibrationValue;
 4d2:	81 bf       	out	0x31, r24	; 49
    }
    odDebugInit();
    usbDeviceDisconnect();
 4d4:	b8 9a       	sbi	0x17, 0	; 23
 4d6:	84 e1       	ldi	r24, 0x14	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4d8:	e7 ec       	ldi	r30, 0xC7	; 199
 4da:	ff ea       	ldi	r31, 0xAF	; 175
 4dc:	31 97       	sbiw	r30, 0x01	; 1
 4de:	f1 f7       	brne	.-4      	; 0x4dc <main+0x14>
 4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <main+0x1a>
 4e2:	00 00       	nop
 4e4:	81 50       	subi	r24, 0x01	; 1
    for(i=0;i<20;i++){  /* 300 ms disconnect */
 4e6:	c1 f7       	brne	.-16     	; 0x4d8 <main+0x10>
        _delay_ms(15);
    }
    usbDeviceConnect();
 4e8:	b8 98       	cbi	0x17, 0	; 23
    DDRB |= 1 << BIT_LED;   /* output for LED */
 4ea:	b9 9a       	sbi	0x17, 1	; 23
    //PORTB |= 1 << BIT_KEY;  /* pull-up on key input */
    wdt_enable(WDTO_1S);
 4ec:	2e e0       	ldi	r18, 0x0E	; 14
 4ee:	88 e1       	ldi	r24, 0x18	; 24
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	0f b6       	in	r0, 0x3f	; 63
 4f4:	f8 94       	cli
 4f6:	a8 95       	wdr
 4f8:	81 bd       	out	0x21, r24	; 33
 4fa:	0f be       	out	0x3f, r0	; 63
 4fc:	21 bd       	out	0x21, r18	; 33
    TCCR1 = 0x0b;           /* select clock: 16.5M/1k -> overflow rate = 16.5M/256k = 62.94 Hz */
}

static void adcInit(void)
{
    ADMUX = UTIL_BIN8(1001, 0011);  /* Vref=2.56V, measure ADC0-  REFS1 REFS0 ADLAR REFS2 , MUX3 MUX2 MUX1 MUX0 -> ADC2=0010, ADC3=0011, ADC2-ADC3=0110, (ADC2-ADC3)*20=0111*/
 4fe:	83 e9       	ldi	r24, 0x93	; 147
 500:	87 b9       	out	0x07, r24	; 7
    ADCSRA = UTIL_BIN8(1000, 0111); /* enable ADC, not free running, interrupt disable, rate = 1/128 = 129khz*/
 502:	87 e8       	ldi	r24, 0x87	; 135
 504:	86 b9       	out	0x06, r24	; 6
    DDRB |= 1 << BIT_LED;   /* output for LED */
    //PORTB |= 1 << BIT_KEY;  /* pull-up on key input */
    wdt_enable(WDTO_1S);
    //timerInit();
    adcInit();
    usbInit();
 506:	9e d1       	rcall	.+828    	; 0x844 <usbInit>
    sei();
 508:	78 94       	sei

/* ------------------------------------------------------------------------- */

static void setIsRecording(uchar newValue)
{
    isRecording = newValue;
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	80 93 67 00 	sts	0x0067, r24
    if(isRecording){
        PORTB &= ~(1 << BIT_LED);      /* LED on */
 510:	c1 98       	cbi	0x18, 1	; 24
    sei();
	setIsRecording(1);
    for(;;){    /* main event loop */
        wdt_reset();
        usbPoll();
        if(usbInterruptIsReady() ){ /* we can send a report */
 512:	cb e7       	ldi	r28, 0x7B	; 123
 514:	d0 e0       	ldi	r29, 0x00	; 0
			adcval1 = value + value + (value >> 1);  /*  value * 2.5 for output in mV */
			ADMUX = UTIL_BIN8(1001, 0011);
			}
		else{
			adcval2 = value + value + (value >> 1);
			ADMUX = UTIL_BIN8(1001, 0010);
 516:	0f 2e       	mov	r0, r31
 518:	f2 e9       	ldi	r31, 0x92	; 146
 51a:	ef 2e       	mov	r14, r31
 51c:	f0 2d       	mov	r31, r0
    if( !(ADCSRA & (1 << ADSC))){ 		//adcPending &&
       // adcPending = 0;
        value=ADC;
		if(adchanel){
			adcval1 = value + value + (value >> 1);  /*  value * 2.5 for output in mV */
			ADMUX = UTIL_BIN8(1001, 0011);
 51e:	0f 2e       	mov	r0, r31
 520:	f3 e9       	ldi	r31, 0x93	; 147
 522:	ff 2e       	mov	r15, r31
 524:	f0 2d       	mov	r31, r0
			}
		else{
			adcval2 = value + value + (value >> 1);
			ADMUX = UTIL_BIN8(1001, 0010);
		}
		adchanel=!adchanel;
 526:	11 e0       	ldi	r17, 0x01	; 1
 528:	00 e0       	ldi	r16, 0x00	; 0
    adcInit();
    usbInit();
    sei();
	setIsRecording(1);
    for(;;){    /* main event loop */
        wdt_reset();
 52a:	a8 95       	wdr
        usbPoll();
 52c:	54 d0       	rcall	.+168    	; 0x5d6 <usbPoll>
        if(usbInterruptIsReady() ){ /* we can send a report */
 52e:	88 81       	ld	r24, Y
 530:	84 ff       	sbrs	r24, 4
 532:	05 c0       	rjmp	.+10     	; 0x53e <main+0x76>
            buildReport();
 534:	41 df       	rcall	.-382    	; 0x3b8 <buildReport>
            usbSetInterrupt(reportBuffer, sizeof(reportBuffer));
 536:	65 e0       	ldi	r22, 0x05	; 5
 538:	89 e6       	ldi	r24, 0x69	; 105
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	2a d0       	rcall	.+84     	; 0x592 <usbSetInterrupt>

/* ------------------------------------------------------------------------- */

static void adcPoll(void)
{int value;
    if( !(ADCSRA & (1 << ADSC))){ 		//adcPending &&
 53e:	36 99       	sbic	0x06, 6	; 6
 540:	f4 cf       	rjmp	.-24     	; 0x52a <main+0x62>
       // adcPending = 0;
        value=ADC;
 542:	84 b1       	in	r24, 0x04	; 4
 544:	95 b1       	in	r25, 0x05	; 5
		if(adchanel){
 546:	20 91 66 00 	lds	r18, 0x0066
 54a:	22 23       	and	r18, r18
 54c:	69 f0       	breq	.+26     	; 0x568 <main+0xa0>
			adcval1 = value + value + (value >> 1);  /*  value * 2.5 for output in mV */
 54e:	9c 01       	movw	r18, r24
 550:	22 0f       	add	r18, r18
 552:	33 1f       	adc	r19, r19
 554:	95 95       	asr	r25
 556:	87 95       	ror	r24
 558:	82 0f       	add	r24, r18
 55a:	93 1f       	adc	r25, r19
 55c:	90 93 65 00 	sts	0x0065, r25
 560:	80 93 64 00 	sts	0x0064, r24
			ADMUX = UTIL_BIN8(1001, 0011);
 564:	f7 b8       	out	0x07, r15	; 7
 566:	0c c0       	rjmp	.+24     	; 0x580 <main+0xb8>
			}
		else{
			adcval2 = value + value + (value >> 1);
 568:	9c 01       	movw	r18, r24
 56a:	22 0f       	add	r18, r18
 56c:	33 1f       	adc	r19, r19
 56e:	95 95       	asr	r25
 570:	87 95       	ror	r24
 572:	82 0f       	add	r24, r18
 574:	93 1f       	adc	r25, r19
 576:	90 93 63 00 	sts	0x0063, r25
 57a:	80 93 62 00 	sts	0x0062, r24
			ADMUX = UTIL_BIN8(1001, 0010);
 57e:	e7 b8       	out	0x07, r14	; 7
		}
		adchanel=!adchanel;
 580:	81 2f       	mov	r24, r17
 582:	90 91 66 00 	lds	r25, 0x0066
 586:	91 11       	cpse	r25, r1
 588:	80 2f       	mov	r24, r16
 58a:	80 93 66 00 	sts	0x0066, r24
		ADCSRA |= (1 << ADSC);  /* start next conversion */
 58e:	36 9a       	sbi	0x06, 6	; 6
 590:	cc cf       	rjmp	.-104    	; 0x52a <main+0x62>

00000592 <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 592:	cf 93       	push	r28
 594:	c6 2f       	mov	r28, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
 596:	20 91 7b 00 	lds	r18, 0x007B
 59a:	24 ff       	sbrs	r18, 4
 59c:	07 c0       	rjmp	.+14     	; 0x5ac <usbSetInterrupt+0x1a>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
 59e:	ec e7       	ldi	r30, 0x7C	; 124
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	30 81       	ld	r19, Z
 5a4:	28 e8       	ldi	r18, 0x88	; 136
 5a6:	23 27       	eor	r18, r19
 5a8:	20 83       	st	Z, r18
 5aa:	03 c0       	rjmp	.+6      	; 0x5b2 <usbSetInterrupt+0x20>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 5ac:	2a e5       	ldi	r18, 0x5A	; 90
 5ae:	20 93 7b 00 	sts	0x007B, r18
 5b2:	e8 2f       	mov	r30, r24
 5b4:	f9 2f       	mov	r31, r25
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 5b6:	ad e7       	ldi	r26, 0x7D	; 125
 5b8:	b0 e0       	ldi	r27, 0x00	; 0
 5ba:	8c 2f       	mov	r24, r28
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
 5bc:	91 91       	ld	r25, Z+
 5be:	9d 93       	st	X+, r25
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
 5c0:	81 50       	subi	r24, 0x01	; 1
 5c2:	e1 f7       	brne	.-8      	; 0x5bc <usbSetInterrupt+0x2a>
    usbCrc16Append(&txStatus->buffer[1], len);
 5c4:	6c 2f       	mov	r22, r28
 5c6:	8d e7       	ldi	r24, 0x7D	; 125
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	a5 dd       	rcall	.-1206   	; 0x116 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
 5cc:	cc 5f       	subi	r28, 0xFC	; 252
 5ce:	c0 93 7b 00 	sts	0x007B, r28
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
 5d2:	cf 91       	pop	r28
 5d4:	08 95       	ret

000005d6 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 5d6:	cf 93       	push	r28
 5d8:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 5da:	80 91 8c 00 	lds	r24, 0x008C
 5de:	83 50       	subi	r24, 0x03	; 3
    if(len >= 0){
 5e0:	0a f4       	brpl	.+2      	; 0x5e4 <usbPoll+0xe>
 5e2:	b4 c0       	rjmp	.+360    	; 0x74c <usbPoll+0x176>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 5e4:	20 91 89 00 	lds	r18, 0x0089
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 5e8:	90 91 88 00 	lds	r25, 0x0088
 5ec:	9d 32       	cpi	r25, 0x2D	; 45
 5ee:	09 f0       	breq	.+2      	; 0x5f2 <usbPoll+0x1c>
 5f0:	ab c0       	rjmp	.+342    	; 0x748 <usbPoll+0x172>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 5f2:	88 30       	cpi	r24, 0x08	; 8
 5f4:	09 f0       	breq	.+2      	; 0x5f8 <usbPoll+0x22>
 5f6:	a8 c0       	rjmp	.+336    	; 0x748 <usbPoll+0x172>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 5f8:	cc e0       	ldi	r28, 0x0C	; 12
 5fa:	d0 e0       	ldi	r29, 0x00	; 0
 5fc:	c2 1b       	sub	r28, r18
 5fe:	d1 09       	sbc	r29, r1
 600:	c0 57       	subi	r28, 0x70	; 112
 602:	df 4f       	sbci	r29, 0xFF	; 255
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 604:	83 ec       	ldi	r24, 0xC3	; 195
 606:	80 93 70 00 	sts	0x0070, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 60a:	8a e5       	ldi	r24, 0x5A	; 90
 60c:	80 93 61 00 	sts	0x0061, r24
        usbMsgFlags = 0;
 610:	10 92 6f 00 	sts	0x006F, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
 614:	88 81       	ld	r24, Y
 616:	80 76       	andi	r24, 0x60	; 96
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 618:	19 f0       	breq	.+6      	; 0x620 <usbPoll+0x4a>
            replyLen = usbFunctionSetup(data);
 61a:	ce 01       	movw	r24, r28
 61c:	e1 de       	rcall	.-574    	; 0x3e0 <usbFunctionSetup>
 61e:	8b c0       	rjmp	.+278    	; 0x736 <usbPoll+0x160>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 620:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 622:	10 92 79 00 	sts	0x0079, r1
    SWITCH_START(rq->bRequest)
 626:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 628:	81 11       	cpse	r24, r1
 62a:	06 c0       	rjmp	.+12     	; 0x638 <usbPoll+0x62>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 62c:	10 92 7a 00 	sts	0x007A, r1
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 630:	29 e7       	ldi	r18, 0x79	; 121
 632:	30 e0       	ldi	r19, 0x00	; 0
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
 634:	82 e0       	ldi	r24, 0x02	; 2
 636:	7b c0       	rjmp	.+246    	; 0x72e <usbPoll+0x158>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 638:	85 30       	cpi	r24, 0x05	; 5
 63a:	31 f4       	brne	.+12     	; 0x648 <usbPoll+0x72>
        usbNewDeviceAddr = value;
 63c:	90 93 8d 00 	sts	0x008D, r25
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 640:	29 e7       	ldi	r18, 0x79	; 121
 642:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 644:	80 e0       	ldi	r24, 0x00	; 0
 646:	73 c0       	rjmp	.+230    	; 0x72e <usbPoll+0x158>
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 648:	86 30       	cpi	r24, 0x06	; 6
 64a:	09 f0       	breq	.+2      	; 0x64e <usbPoll+0x78>
 64c:	50 c0       	rjmp	.+160    	; 0x6ee <usbPoll+0x118>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 64e:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 650:	81 30       	cpi	r24, 0x01	; 1
 652:	41 f4       	brne	.+16     	; 0x664 <usbPoll+0x8e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 654:	8b e6       	ldi	r24, 0x6B	; 107
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	90 93 8b 00 	sts	0x008B, r25
 65c:	80 93 8a 00 	sts	0x008A, r24
 660:	82 e1       	ldi	r24, 0x12	; 18
 662:	41 c0       	rjmp	.+130    	; 0x6e6 <usbPoll+0x110>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 664:	82 30       	cpi	r24, 0x02	; 2
 666:	41 f4       	brne	.+16     	; 0x678 <usbPoll+0xa2>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 668:	89 e4       	ldi	r24, 0x49	; 73
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	90 93 8b 00 	sts	0x008B, r25
 670:	80 93 8a 00 	sts	0x008A, r24
 674:	82 e2       	ldi	r24, 0x22	; 34
 676:	37 c0       	rjmp	.+110    	; 0x6e6 <usbPoll+0x110>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 678:	83 30       	cpi	r24, 0x03	; 3
 67a:	f1 f4       	brne	.+60     	; 0x6b8 <usbPoll+0xe2>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
 67c:	91 11       	cpse	r25, r1
 67e:	08 c0       	rjmp	.+16     	; 0x690 <usbPoll+0xba>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 680:	8f ea       	ldi	r24, 0xAF	; 175
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	90 93 8b 00 	sts	0x008B, r25
 688:	80 93 8a 00 	sts	0x008A, r24
 68c:	84 e0       	ldi	r24, 0x04	; 4
 68e:	2b c0       	rjmp	.+86     	; 0x6e6 <usbPoll+0x110>
        SWITCH_CASE(1)
 690:	91 30       	cpi	r25, 0x01	; 1
 692:	41 f4       	brne	.+16     	; 0x6a4 <usbPoll+0xce>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 694:	8f e8       	ldi	r24, 0x8F	; 143
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	90 93 8b 00 	sts	0x008B, r25
 69c:	80 93 8a 00 	sts	0x008A, r24
 6a0:	80 e2       	ldi	r24, 0x20	; 32
 6a2:	21 c0       	rjmp	.+66     	; 0x6e6 <usbPoll+0x110>
        SWITCH_CASE(2)
 6a4:	92 30       	cpi	r25, 0x02	; 2
 6a6:	e1 f4       	brne	.+56     	; 0x6e0 <usbPoll+0x10a>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 6a8:	8d e7       	ldi	r24, 0x7D	; 125
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	90 93 8b 00 	sts	0x008B, r25
 6b0:	80 93 8a 00 	sts	0x008A, r24
 6b4:	82 e1       	ldi	r24, 0x12	; 18
 6b6:	17 c0       	rjmp	.+46     	; 0x6e6 <usbPoll+0x110>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
 6b8:	81 32       	cpi	r24, 0x21	; 33
 6ba:	41 f4       	brne	.+16     	; 0x6cc <usbPoll+0xf6>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
 6bc:	8b e5       	ldi	r24, 0x5B	; 91
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	90 93 8b 00 	sts	0x008B, r25
 6c4:	80 93 8a 00 	sts	0x008A, r24
 6c8:	89 e0       	ldi	r24, 0x09	; 9
 6ca:	0d c0       	rjmp	.+26     	; 0x6e6 <usbPoll+0x110>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
 6cc:	82 32       	cpi	r24, 0x22	; 34
 6ce:	51 f4       	brne	.+20     	; 0x6e4 <usbPoll+0x10e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
 6d0:	8e e1       	ldi	r24, 0x1E	; 30
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	90 93 8b 00 	sts	0x008B, r25
 6d8:	80 93 8a 00 	sts	0x008A, r24
 6dc:	8b e2       	ldi	r24, 0x2B	; 43
 6de:	03 c0       	rjmp	.+6      	; 0x6e6 <usbPoll+0x110>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	01 c0       	rjmp	.+2      	; 0x6e6 <usbPoll+0x110>
 6e4:	80 e0       	ldi	r24, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 6e6:	90 e4       	ldi	r25, 0x40	; 64
 6e8:	90 93 6f 00 	sts	0x006F, r25
 6ec:	24 c0       	rjmp	.+72     	; 0x736 <usbPoll+0x160>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 6ee:	88 30       	cpi	r24, 0x08	; 8
 6f0:	99 f0       	breq	.+38     	; 0x718 <usbPoll+0x142>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 6f2:	89 30       	cpi	r24, 0x09	; 9
 6f4:	31 f4       	brne	.+12     	; 0x702 <usbPoll+0x12c>
        usbConfiguration = value;
 6f6:	90 93 8f 00 	sts	0x008F, r25
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 6fa:	29 e7       	ldi	r18, 0x79	; 121
 6fc:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 6fe:	80 e0       	ldi	r24, 0x00	; 0
 700:	16 c0       	rjmp	.+44     	; 0x72e <usbPoll+0x158>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 702:	8a 30       	cpi	r24, 0x0A	; 10
 704:	69 f0       	breq	.+26     	; 0x720 <usbPoll+0x14a>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 706:	8b 30       	cpi	r24, 0x0B	; 11
 708:	79 f4       	brne	.+30     	; 0x728 <usbPoll+0x152>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 70a:	8b e4       	ldi	r24, 0x4B	; 75
 70c:	80 93 7c 00 	sts	0x007C, r24
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 710:	29 e7       	ldi	r18, 0x79	; 121
 712:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 714:	80 e0       	ldi	r24, 0x00	; 0
 716:	0b c0       	rjmp	.+22     	; 0x72e <usbPoll+0x158>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
 718:	2f e8       	ldi	r18, 0x8F	; 143
 71a:	30 e0       	ldi	r19, 0x00	; 0
        len = 1;
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	07 c0       	rjmp	.+14     	; 0x72e <usbPoll+0x158>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 720:	29 e7       	ldi	r18, 0x79	; 121
 722:	30 e0       	ldi	r19, 0x00	; 0
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
 724:	81 e0       	ldi	r24, 0x01	; 1
 726:	03 c0       	rjmp	.+6      	; 0x72e <usbPoll+0x158>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 728:	29 e7       	ldi	r18, 0x79	; 121
 72a:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 72c:	80 e0       	ldi	r24, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = (usbMsgPtr_t)dataPtr;
 72e:	30 93 8b 00 	sts	0x008B, r19
 732:	20 93 8a 00 	sts	0x008A, r18
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 736:	9f 81       	ldd	r25, Y+7	; 0x07
 738:	91 11       	cpse	r25, r1
 73a:	04 c0       	rjmp	.+8      	; 0x744 <usbPoll+0x16e>
 73c:	9e 81       	ldd	r25, Y+6	; 0x06
 73e:	98 17       	cp	r25, r24
 740:	08 f4       	brcc	.+2      	; 0x744 <usbPoll+0x16e>
 742:	89 2f       	mov	r24, r25
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 744:	80 93 60 00 	sts	0x0060, r24
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 748:	10 92 8c 00 	sts	0x008C, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 74c:	80 91 61 00 	lds	r24, 0x0061
 750:	84 ff       	sbrs	r24, 4
 752:	4d c0       	rjmp	.+154    	; 0x7ee <usbPoll+0x218>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 754:	80 91 60 00 	lds	r24, 0x0060
 758:	8f 3f       	cpi	r24, 0xFF	; 255
 75a:	09 f4       	brne	.+2      	; 0x75e <usbPoll+0x188>
 75c:	48 c0       	rjmp	.+144    	; 0x7ee <usbPoll+0x218>
 75e:	c8 2f       	mov	r28, r24
 760:	89 30       	cpi	r24, 0x09	; 9
 762:	08 f0       	brcs	.+2      	; 0x766 <usbPoll+0x190>
 764:	c8 e0       	ldi	r28, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 766:	8c 1b       	sub	r24, r28
 768:	80 93 60 00 	sts	0x0060, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 76c:	e0 e7       	ldi	r30, 0x70	; 112
 76e:	f0 e0       	ldi	r31, 0x00	; 0
 770:	90 81       	ld	r25, Z
 772:	88 e8       	ldi	r24, 0x88	; 136
 774:	89 27       	eor	r24, r25
 776:	80 83       	st	Z, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 778:	cc 23       	and	r28, r28
 77a:	09 f4       	brne	.+2      	; 0x77e <usbPoll+0x1a8>
 77c:	5a c0       	rjmp	.+180    	; 0x832 <usbPoll+0x25c>
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
 77e:	80 91 8a 00 	lds	r24, 0x008A
 782:	90 91 8b 00 	lds	r25, 0x008B
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 786:	20 91 6f 00 	lds	r18, 0x006F
 78a:	26 ff       	sbrs	r18, 6
 78c:	11 c0       	rjmp	.+34     	; 0x7b0 <usbPoll+0x1da>
 78e:	a1 e7       	ldi	r26, 0x71	; 113
 790:	b0 e0       	ldi	r27, 0x00	; 0
 792:	fc 01       	movw	r30, r24
 794:	2c 2f       	mov	r18, r28
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 796:	34 91       	lpm	r19, Z
                    *data++ = c;
 798:	3d 93       	st	X+, r19
                    r++;
 79a:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
 79c:	21 50       	subi	r18, 0x01	; 1
 79e:	d9 f7       	brne	.-10     	; 0x796 <usbPoll+0x1c0>
 7a0:	2f ef       	ldi	r18, 0xFF	; 255
 7a2:	2c 0f       	add	r18, r28
 7a4:	30 e0       	ldi	r19, 0x00	; 0
 7a6:	2f 5f       	subi	r18, 0xFF	; 255
 7a8:	3f 4f       	sbci	r19, 0xFF	; 255
 7aa:	82 0f       	add	r24, r18
 7ac:	93 1f       	adc	r25, r19
 7ae:	0f c0       	rjmp	.+30     	; 0x7ce <usbPoll+0x1f8>
 7b0:	dc 01       	movw	r26, r24
 7b2:	e1 e7       	ldi	r30, 0x71	; 113
 7b4:	f0 e0       	ldi	r31, 0x00	; 0
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 7b6:	2c 2f       	mov	r18, r28
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
 7b8:	3d 91       	ld	r19, X+
 7ba:	31 93       	st	Z+, r19
                    r++;
                }while(--i);
 7bc:	21 50       	subi	r18, 0x01	; 1
 7be:	e1 f7       	brne	.-8      	; 0x7b8 <usbPoll+0x1e2>
 7c0:	2f ef       	ldi	r18, 0xFF	; 255
 7c2:	2c 0f       	add	r18, r28
 7c4:	30 e0       	ldi	r19, 0x00	; 0
 7c6:	2f 5f       	subi	r18, 0xFF	; 255
 7c8:	3f 4f       	sbci	r19, 0xFF	; 255
 7ca:	82 0f       	add	r24, r18
 7cc:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
 7ce:	90 93 8b 00 	sts	0x008B, r25
 7d2:	80 93 8a 00 	sts	0x008A, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 7d6:	6c 2f       	mov	r22, r28
 7d8:	81 e7       	ldi	r24, 0x71	; 113
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	9c dc       	rcall	.-1736   	; 0x116 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 7de:	cc 5f       	subi	r28, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 7e0:	cc 30       	cpi	r28, 0x0C	; 12
 7e2:	18 f4       	brcc	.+6      	; 0x7ea <usbPoll+0x214>
            usbMsgLen = USB_NO_MSG;
 7e4:	8f ef       	ldi	r24, 0xFF	; 255
 7e6:	80 93 60 00 	sts	0x0060, r24
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
 7ea:	c0 93 61 00 	sts	0x0061, r28
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 7ee:	86 b3       	in	r24, 0x16	; 22
 7f0:	85 70       	andi	r24, 0x05	; 5
        if(usbLineStatus != 0)  /* SE0 has ended */
 7f2:	b1 f4       	brne	.+44     	; 0x820 <usbPoll+0x24a>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 7f4:	83 e1       	ldi	r24, 0x13	; 19
        uchar usbLineStatus = USBIN & USBMASK;
 7f6:	96 b3       	in	r25, 0x16	; 22
 7f8:	95 70       	andi	r25, 0x05	; 5
        if(usbLineStatus != 0)  /* SE0 has ended */
 7fa:	99 f4       	brne	.+38     	; 0x822 <usbPoll+0x24c>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 7fc:	81 50       	subi	r24, 0x01	; 1
 7fe:	d9 f7       	brne	.-10     	; 0x7f6 <usbPoll+0x220>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 800:	10 92 8d 00 	sts	0x008D, r1
    usbDeviceAddr = 0;
 804:	10 92 87 00 	sts	0x0087, r1

static inline void usbHandleResetHook(uchar notResetState)
{
#ifdef USB_RESET_HOOK
static uchar    wasReset;
uchar           isReset = !notResetState;
 808:	c1 e0       	ldi	r28, 0x01	; 1
 80a:	81 11       	cpse	r24, r1
 80c:	c0 e0       	ldi	r28, 0x00	; 0

    if(wasReset != isReset){
 80e:	80 91 6e 00 	lds	r24, 0x006E
 812:	c8 13       	cpse	r28, r24
 814:	02 c0       	rjmp	.+4      	; 0x81a <usbPoll+0x244>
 816:	13 c0       	rjmp	.+38     	; 0x83e <usbPoll+0x268>
        USB_RESET_HOOK(isReset);
 818:	0a de       	rcall	.-1004   	; 0x42e <usbEventResetReady>
        wasReset = isReset;
 81a:	c0 93 6e 00 	sts	0x006E, r28
 81e:	0f c0       	rjmp	.+30     	; 0x83e <usbPoll+0x268>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 820:	84 e1       	ldi	r24, 0x14	; 20

static inline void usbHandleResetHook(uchar notResetState)
{
#ifdef USB_RESET_HOOK
static uchar    wasReset;
uchar           isReset = !notResetState;
 822:	c1 e0       	ldi	r28, 0x01	; 1
 824:	81 11       	cpse	r24, r1
 826:	c0 e0       	ldi	r28, 0x00	; 0

    if(wasReset != isReset){
 828:	80 91 6e 00 	lds	r24, 0x006E
 82c:	c8 13       	cpse	r28, r24
 82e:	f4 cf       	rjmp	.-24     	; 0x818 <usbPoll+0x242>
 830:	06 c0       	rjmp	.+12     	; 0x83e <usbPoll+0x268>
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 832:	6c 2f       	mov	r22, r28
 834:	81 e7       	ldi	r24, 0x71	; 113
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	6e dc       	rcall	.-1828   	; 0x116 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 83a:	cc 5f       	subi	r28, 0xFC	; 252
 83c:	d3 cf       	rjmp	.-90     	; 0x7e4 <usbPoll+0x20e>
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 83e:	df 91       	pop	r29
 840:	cf 91       	pop	r28
 842:	08 95       	ret

00000844 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 844:	85 b7       	in	r24, 0x35	; 53
 846:	83 60       	ori	r24, 0x03	; 3
 848:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 84a:	8b b7       	in	r24, 0x3b	; 59
 84c:	80 64       	ori	r24, 0x40	; 64
 84e:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 850:	8b e4       	ldi	r24, 0x4B	; 75
 852:	80 93 7c 00 	sts	0x007C, r24
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
 856:	8a e5       	ldi	r24, 0x5A	; 90
 858:	80 93 7b 00 	sts	0x007B, r24
 85c:	08 95       	ret

0000085e <__eerd_byte_tn85>:
 85e:	e1 99       	sbic	0x1c, 1	; 28
 860:	fe cf       	rjmp	.-4      	; 0x85e <__eerd_byte_tn85>
 862:	9f bb       	out	0x1f, r25	; 31
 864:	8e bb       	out	0x1e, r24	; 30
 866:	e0 9a       	sbi	0x1c, 0	; 28
 868:	99 27       	eor	r25, r25
 86a:	8d b3       	in	r24, 0x1d	; 29
 86c:	08 95       	ret

0000086e <__eewr_byte_tn85>:
 86e:	26 2f       	mov	r18, r22

00000870 <__eewr_r18_tn85>:
 870:	e1 99       	sbic	0x1c, 1	; 28
 872:	fe cf       	rjmp	.-4      	; 0x870 <__eewr_r18_tn85>
 874:	1c ba       	out	0x1c, r1	; 28
 876:	9f bb       	out	0x1f, r25	; 31
 878:	8e bb       	out	0x1e, r24	; 30
 87a:	2d bb       	out	0x1d, r18	; 29
 87c:	0f b6       	in	r0, 0x3f	; 63
 87e:	f8 94       	cli
 880:	e2 9a       	sbi	0x1c, 2	; 28
 882:	e1 9a       	sbi	0x1c, 1	; 28
 884:	0f be       	out	0x3f, r0	; 63
 886:	01 96       	adiw	r24, 0x01	; 1
 888:	08 95       	ret

0000088a <_exit>:
 88a:	f8 94       	cli

0000088c <__stop_program>:
 88c:	ff cf       	rjmp	.-2      	; 0x88c <__stop_program>
